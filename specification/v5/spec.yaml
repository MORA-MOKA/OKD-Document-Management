openapi: "3.0.3"
info:
  version: "5.0.0"
  title: OKD - Open Education API
  description: |
    OpenAPI specification for the Open Education API, used in the OKD.
    <br/>
    NOTE:This is a subset of the OOAPI that is used in the "MBO-OKD" project (sponsored by npuls/mbo-digitaal in the netherlands). This project uses the "nl-okd" consumer 
    <br/>
    <figure>
    	<a target="_blank" href="OOAPIv5_model.png">
      <img src="OOAPIv5_model.png" alt="OOAPI informatiemodel dat de OOAPI specificatie voedt" width="70%" class="img-responsive">
      </a>
      <figcaption> OOAPI informatiemodel dat de OOAPI specificatie voedt (klik om te vergroten)</figcaption>
    </figure>

    Het model geeft een overzicht van hoe de objecten waarop de API is gespecificeerd zijn gerelateerd. Het overkoepelende concept educations wordt niet gevonden in de eindpunten van de API. De kleinere concepten van programOffering, courseOffering en conceptOffering worden allemaal gevonden in het offering eindpunt. De verschillende types van associatie kunnen allemaal worden gevonden in het association eindpunt.
    
    Het originele bestand voor dit model kan <a target="_blank" href="OOAPIv5_model_v0.5.drawio">hier</a> worden gevonden

    Het program relations object wordt niet gevonden als een apart eindpunt, maar relaties tussen programma's kunnen worden gevonden binnen het program eindpunt door dat eindpunt uit te breiden.

    Informatie over eerdere bijeenkomsten en presentaties kan <a target="_blank" href="https://github.com/open-education-api/notulen">hier</a> worden gevonden

    Informatie over het EDU-API model dat ook werd gebruikt voor deze api wordt <a target="_blank" href="eduapi.png">hier</a> getoond

  contact: 
    name: Kees van Ginkel
  x-logo:
    url: ../logo.png

servers:
  - url: http://okd.eduapi.nl/v5
    description: OKD demo implementation

tags:
  - name: service metadata
    description: | 
      The service API provides additional metadata needed to make the OOAPI fit for this organization.

          Voor de OKD: De service API biedt aanvullende metadata die nodig is om te zien welke versie van de ooapi en OKD ondersteund wordt.
#  - name: academic sessions
#    description: The academic sessions API provides information about the different time periods a program can be offered.
  # - name: associations
  #   description: |
  #     The associations API provides information about the association between an offering and a person (e.g. students, lecturers, etc).
  #     Associations can be posted between institutions This requires information details on the offering and the persons.
  #     To allow for this information a complete person object and offering object can be part of the API.
  #     The structure is explained in the following model:
  #     <table>
  #       <tr>
  #        <td></td>
  #        <td colspan=3 align=center>offering</td>
  #       </tr>
  #       <tr>
  #        <td rowspan=3>student</td>
  #        <td></td>
  #        <!-- <td>internal</td>
  #        -->
  #        <td>external</td>
  #       </tr>
  #       <tr>
  #        <td>internal</td>
  #        <!-- <td>POST <a href="#tag/offerings/paths/~1offerings~1{offeringId}~1associations~1external/post">/offerings/{offeringId}/associations/me</a> local enrollment based on selected offering
  #         This call will allow for a local student using his .wellknown credentials to enroll for the offering identified by the offeringId
  #         <br>Alternatively the association can also be created through POST <a href="#tag/associations/paths/~1associations~1me/post">/associations/me</a>
  #        </td>
  #        -->
  #        <td>POST <a href="#tag/associations/paths/~1associations~1external~1me/post">/associations/external/me</a> gets student details from .wellknown at home institution. It passes offering details (provided by external institution) to the home institution so the home institution can create a placeholder for the offering and its results.
  #        </td>
  #       </tr>
  #       <tr>
  #        <td>external</td>
  #         <!--
  #         <td>
  #         This method is not yet implemented it requires full student details and offering details. This would mean the
  #         OOAPI message would contain more than one resource in the message. At the moment the student mobility project is looking into
  #         a sollution.
  #         <br> Alternatively it could be achieved through using two calls:
  #         <ul>
  #          <li>create student with POST <a href="#tag/persons/paths/~1persons~1{personId}/post">/persons</a></li>
  #          <li><a href="#tag/offerings/paths/~1offerings~1{offeringId}~1associations~1external/post">/offerings/{offeringId}/associations/me</a></li>
  #         </ul>
  #         for the enrollment
  #        </td>
  #         -->
  #        <td>no support needed</td>
  #       </tr>
  #     </table>
  #     Direct update of current information: <a href="#tag/associations/paths/~1associations~1{associationId}/patch"> PATCH /associations/{associationId}</a>
  #     This call is currently limited to passing results and a remote state. For future use other association resource information could be passed.
  #     More information on the support for student mobility can be found
  #     <a href="https://swimlanes.io/d/s5mfpj7Si">here</a>
#  - name: buildings
#    description: The building API provides a building that is currently used by the organization. Including all location details.
#  - name: courses
#    description: The courses API provides a self-contained and formally structured learning experience. Aimed at providing learning outcomes to students. Usually placed in the context of a program.
  # - name: components
  #   description: The components API provides information about components being part of parent courses.
#  - name: education specifications
#    description: |
#      The education specification API provides information on the specification of an education object.
#      This specification allows for other education objects to be derived from it.
#      It is used to aggregate education objects from a supplying institution.
#      It clusters programs to a main educationSpecification that is used in registries such as RIO.
  # - name: groups
  #   description: The groups API provides information about groups that are related to organizations, persons and offerings. Groups of students that are related to an offering are typically used for rostering. The rostering application assigns students based on these groups. For example, class 1b will be assigned to the course offering on monday morning. Not all groups are related to an offering. A group of people can also be a team that is working on a task outside the OOAPI scope. These can be teams of students, but also teams of employees.
#  - name: news
#    description: The news API provides news feeds and items regarding a specific subject.
  # - name: offerings
  #   description: The offerings API provides information about offerings which have a global timeframe, e.g. a period to which students can enroll.
  # - name: organizations
  #   description: The organizations API provides the organizations that are responsible for the execution and recognition of education.
  # - name: programs
  #   description: The programs API provides a coherent set of educational components, aimed at the realization of competences or objectives in the field of knowledge, insight, attitudes and skills that the person who completes the program must have.
#  - name: rooms
#    description: The rooms API provides the part of a building where an activity can take place. Including detail information on the resources available, number of seats, etc. (Updated continuously)
  - name: documents
    description: |
      The documents API provides access to the documents in a binary format

          Voor de OKD: De documenten API biedt toegang tot de documenten in een binaire vorm en de mogenlijkheid om de inhoud van documenten te updaten. Het aanbieden van documenten gaat via andere endpoints.
  - name: associations
    description: |
      De associations API biedt informatie over de inschrijvingen van personen bij programma's, cursussen en componenten.
          
          Voor de OKD: In het Nederlandse onderwijssysteem zijn dit de inschrijving-verbintenis en de inschrijving voor BPV of examens
  - name: persons
    description: |
      The persons API provides information about persons related to an organization.

          Voor de OKD: De personen API geeft de mogenlijkheid om een bestand aan te bieden die aan de persoon gelinkt is.

          Ook kan er additionele informatie van een persoon opgehaald worden. (zoeken op studentnummer of id)
  - name: offerings
    description: |
      The offerings API provides information about offerings which have a global timeframe, e.g. a period to which students can enroll.

          Voor de OKD: De offerings API biedt informatie over de onderwijsaanbod die een instelling aanbiedt. Hiermee kna meer informatie over een opleiding .
#  - name: service_model
#    x-displayName: Service
#    description: |
#      <SchemaDefinition schemaRef="#/components/schemas/Service" />
#  - name: education_specification_model
#    x-displayName: EducationSpecification
#    description: |
#      <SchemaDefinition schemaRef="#/components/schemas/EducationSpecification" />
  # - name: program_model 
  #   x-displayName: Program
  #   description: |
  #     <SchemaDefinition schemaRef="#/components/schemas/Program" />
#  - name: course_model
#    x-displayName: Course
#    description: |
#      <SchemaDefinition schemaRef="#/components/schemas/Course" />
  # - name: component_model
  #   x-displayName: Component
  #   description: |
  #     <SchemaDefinition schemaRef="#/components/schemas/Component" />
  # - name: program_offering_model
  #   x-displayName: ProgramOffering
  #   description: |
  #     <SchemaDefinition schemaRef="#/components/schemas/ProgramOffering" />
  # - name: course_offering_model
  #   x-displayName: CourseOffering
  #   description: |
  #     <SchemaDefinition schemaRef="#/components/schemas/CourseOffering" />
  # - name: component_offering_model
  #   x-displayName: ComponentOffering
  #   description: |
  #     <SchemaDefinition schemaRef="#/components/schemas/ComponentOffering" />
  # - name: association_model
  #   x-displayName: Association
  #   description: |
  #     <SchemaDefinition schemaRef="#/components/schemas/AssociationFull" />
  # - name: person_model
  #   x-displayName: Person
  #   description: |
  #     <SchemaDefinition schemaRef="#/components/schemas/Person" />
  # - name: group_model
  #   x-displayName: Group
  #   description: |
  #     <SchemaDefinition schemaRef="#/components/schemas/Group" />
#  - name: academic_session_model
#    x-displayName: AcademicSession
#    description: |
#      <SchemaDefinition schemaRef="#/components/schemas/AcademicSession" />
  # - name: organization_model
  #   x-displayName: Organization
  #   description: |
  #     <SchemaDefinition schemaRef="#/components/schemas/Organization" />
#  - name: building_model
#    x-displayName: Building
#    description: |
#      <SchemaDefinition schemaRef="#/components/schemas/Building" />
#  - name: room_model
#    x-displayName: Room
#    description: |
#      <SchemaDefinition schemaRef="#/components/schemas/Room" />
#  - name: news_feed_model
#    x-displayName: NewsFeed
#    description: |
#      <SchemaDefinition schemaRef="#/components/schemas/NewsFeed" />
#  - name: news_item_model
#    x-displayName: NewsItem
#    description: |
#      <SchemaDefinition schemaRef="#/components/schemas/NewsItem" />

x-tagGroups:
  - name: Requests and responses
    tags: 
      - service metadata
#      - academic sessions
      - associations
#      - buildings
      - courses
      - components
#      - education specifications
#      - groups
#      - news
      - documents
      - offerings
#      - organizations
      - persons
      - programs
#      - rooms
  - name: Models
    tags:
      - service_model
#      - academic_session_model
#      - association_model
#      - building_model
      - component_model
      - component_offering_model
      - course_model
      - course_offering_model
#      - education_specification_model
#      - group_model
#      - news_feed_model
#      - news_item_model
#      - organization_model
      - person_model
      - program_model
      - program_offering_model
#      - room_model

components:
  securitySchemes:
    oAuthFlows:
      type: oauth2
      description: |
        This API uses oauth Cleint credentials for server to server #/components/schemas/EducationSpecification
      flows: 
        clientCredentials:
          tokenUrl: https://example.nl/oauth2/authorize
          scopes:
            okd:alldocuments: flow 1,2,3,4
            okd:examdocuments: flow 2
            okd:bpvdocuments: flow 3
            okd:graduationdocuments: flow 4
            okd:enrollmentderollment: flow 1,5
            okd:destroyednotification: flow 6
            okd:studentinfo: flow 7
  schemas:
    Service:
      $ref: 'schemas/Service.yaml'
    Component:
      $ref: 'schemas/Component.yaml'
    ComponentOffering:
      $ref: 'schemas/ComponentOffering.yaml'
    Course:
      $ref: 'schemas/Course.yaml'
    CourseOffering:
      $ref: 'schemas/CourseOffering.yaml'
    Person:
      $ref: 'schemas/Person.yaml'
    Program:
      $ref: 'schemas/Program.yaml'
    ProgramOffering:
      $ref: 'schemas/ProgramOffering.yaml'

    #   - $ref: 'schemas/Service.yaml'
    #   - $ref: schemas/AcademicSession.yaml
    #   - $ref: schemas/Building.yaml
    #   - $ref: schemas/Component.yaml
    #   - $ref: schemas/ComponentOffering.yaml
    #   - $ref: schemas/Course.yaml
    #   - $ref: schemas/CourseOffering.yaml
    #   - $ref: schemas/EducationSpecification.yaml
    #   - $ref: schemas/Group.yaml
    #   - $ref: schemas/NewsFeed.yaml
    #   - $ref: schemas/NewsItem.yaml
    #   - $ref: schemas/Organization.yaml
    #   - $ref: schemas/Person.yaml
    #   - $ref: schemas/Program.yaml
    #   - $ref: schemas/ProgramOffering.yaml
    #   - $ref: schemas/Room.yaml
    association:
      $ref: 'schemas/AssociationFull.yaml'
    #   - $ref: schemas/AssociationFull.yaml

paths:
  /:
    $ref: paths/Service.yaml
  /persons:
    $ref: paths/PersonCollection.yaml
  # /persons/me:
  #   $ref: paths/PersonMe.yaml
  /persons/{personId}:
    $ref: paths/PersonInstance.yaml
  #/persons/{personId}/associations:
  #  $ref: paths/PersonAssociationCollection.yaml
  # /persons/{personId}/groups:
  #   $ref: paths/PersonGroupCollection.yaml
  # /organizations:
  #   $ref: paths/OrganizationCollection.yaml
  #/organizations/{organizationId}:
  #  $ref: paths/OrganizationInstance.yaml
  # /organizations/{organizationId}/programs:
  #   $ref: paths/OrganizationProgramCollection.yaml
  # /organizations/{organizationId}/courses:
  #   $ref: paths/OrganizationCourseCollection.yaml
  # /organizations/{organizationId}/components:
  #   $ref: paths/OrganizationComponentCollection.yaml
  # /organizations/{organizationId}/offerings:
  #   $ref: paths/OrganizationOfferingCollection.yaml
  # /organizations/{organizationId}/groups:
  #   $ref: paths/OrganizationGroupCollection.yaml
  # /organizations/{organizationId}/education-specifications:
  #   $ref: paths/OrganizationEducationSpecificationCollection.yaml
  # /academic-sessions:
  #   $ref: paths/AcademicSessionCollection.yaml
  # /academic-sessions/{academicSessionId}:
  #   $ref: paths/AcademicSessionInstance.yaml
  # /academic-sessions/{academicSessionId}/offerings:
  #   $ref: paths/AcademicSessionOfferingCollection.yaml
  # /programs:
  #   $ref: paths/ProgramCollection.yaml
  # /programs/{programId}:
  #   $ref: paths/ProgramInstance.yaml
  # /programs/{programId}/programs:
  #   $ref: paths/ProgramProgramCollection.yaml
  # /programs/{programId}/courses:
  #   $ref: paths/ProgramCourseCollection.yaml
  # /programs/{programId}/offerings:
  #   $ref: paths/ProgramOfferingCollection.yaml
  # /courses:
  #   $ref: paths/CourseCollection.yaml
  # /courses/{courseId}:
  #   $ref: paths/CourseInstance.yaml
  # /courses/{courseId}/components:
  #   $ref: paths/CourseComponentCollection.yaml
  # /courses/{courseId}/offerings:
  #   $ref: paths/CourseOfferingCollection.yaml
  #/components/{componentId}:
  #  $ref: paths/ComponentInstance.yaml
  #/components:
  #  $ref: paths/ComponentCollection.yaml
  # /components/{componentId}/offerings:
  #   $ref: paths/ComponentOfferingCollection.yaml
  #/offerings:
  #  $ref: paths/OfferingCollection.yaml
  /offerings/{offeringId}:
    $ref: paths/OfferingInstance.yaml
  #/offerings/{offeringId}/associations:
  #  $ref: paths/OfferingAssociationCollection.yaml
  # /offerings/{offeringId}/associations/{associationId}:
  #  $ref: paths/OfferingAssociationInstance.yaml
  # /offerings/{offeringId}/associations/me:
  #   $ref: paths/OfferingAssociationInstanceMe.yaml
  # /offerings/{offeringId}/groups:
  #   $ref: paths/OfferingGroupCollection.yaml
  /documents/{documentId}:
    $ref: paths/DocumentInstance.yaml
  /associations/{associationId}:
    $ref: paths/AssociationInstance.yaml
  #/associations/{associationId}/url:
  #  $ref: paths/AssociationUrl.yaml
  # /associations/me:
  #   $ref: paths/AssociationInstanceMe.yaml
  # /associations/external/me:
  #   $ref: paths/AssociationInstanceExternalMe.yaml
  # /buildings:
  #   $ref: paths/BuildingCollection.yaml
  # /buildings/{buildingId}:
  #   $ref: paths/BuildingInstance.yaml
  # /buildings/{buildingId}/rooms:
  #   $ref: paths/BuildingRoomCollection.yaml
  # /rooms:
  #   $ref: paths/RoomCollection.yaml
  # /rooms/{roomId}:
  #   $ref: paths/RoomInstance.yaml
  # /news-feeds:
  #   $ref: paths/NewsFeedCollection.yaml
  # /news-feeds/{newsFeedId}:
  #   $ref: paths/NewsFeedInstance.yaml
  # /news-feeds/{newsFeedId}/news-items:
  #   $ref: paths/NewsFeedItemCollection.yaml
  # /news-items/{newsItemId}:
  #   $ref: paths/NewsItemInstance.yaml
  # /education-specifications:
  #   $ref: paths/EducationSpecificationCollection.yaml
  # /education-specifications/{educationSpecificationId}:
  #   $ref: paths/EducationSpecificationInstance.yaml
  # /education-specifications/{educationSpecificationId}/education-specifications:
  #   $ref: paths/EducationSpecificationEducationSpecificationCollection.yaml
  # /education-specifications/{educationSpecificationId}/courses:
  #   $ref: paths/EducationSpecificationCourseCollection.yaml
  # /education-specifications/{educationSpecificationId}/programs:
  #   $ref: paths/EducationSpecificationProgramCollection.yaml
  #/groups:
  #  $ref: paths/GroupCollection.yaml
  #/groups/{groupId}:
  #  $ref: paths/GroupInstance.yaml
  # /groups/{groupId}/persons:
  #   $ref: paths/GroupPersonCollection.yaml
  #/groups/{groupId}/members:
  #  $ref: paths/GroupMemberships.yaml
